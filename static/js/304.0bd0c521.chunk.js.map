{"version":3,"file":"static/js/304.0bd0c521.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/pages/SinglePage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import './appBanner.scss';\r\nimport avengers from '../../resources/img/Avengers.png';\r\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\r\n\r\nconst AppBanner = () => {\r\n    return (\r\n        <div className=\"app__banner\">\r\n            <img src={avengers} alt=\"Avengers\"/>\r\n            <div className=\"app__banner-text\">\r\n                New comics every week!<br/>\r\n                Stay tuned!\r\n            </div>\r\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppBanner;","import { useParams} from 'react-router-dom';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport { useEffect, useState } from 'react';\r\nimport AppBanner from '../appBanner/AppBanner';\r\nimport setContent from '../../utils/setContent';\r\nimport './SinglePageLayouts/singleComic.scss';\r\n\r\nconst SinglePage = ({Component, dataType}) => {\r\n    const {id} = useParams();\r\n    const [data, setData] = useState(null);\r\n    const {clearError, getCharacter, getComic, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateData();\r\n        // eslint-disable-next-line\r\n    }, [id])\r\n\r\n    const updateData = () => {\r\n        if (!id) {\r\n            return;\r\n        }\r\n        clearError();\r\n        switch (dataType) {\r\n            case 'comic':\r\n                getComic(id)\r\n                    .then(onDataLoaded)\r\n                    .then(() => setProcess('confirmed'));\r\n                    break\r\n            case 'character':\r\n                getCharacter(id)\r\n                    .then(onDataLoaded)\r\n                    .then(() => setProcess('confirmed'));\r\n                    break\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    const onDataLoaded = (data) => {\r\n        setData(data);\r\n    }\r\n    const style = process === 'loading' ? 'single-comic__load' : 'single-comic'\r\n    return (\r\n        <>\r\n            <AppBanner/>\r\n            <div className={style}>\r\n                {setContent(process, Component, data)}   \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SinglePage;","import {useState, useCallback} from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting')\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type' : 'application/json'}) => {\r\n        setProcess('loading');\r\n        try {\r\n            const responce = await fetch(url, {method, body, headers});\r\n            if (!responce.ok) {\r\n                throw new Error(`Error, status: ${responce.status}`);\r\n            }\r\n            const data = await responce.json();\r\n            return data\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess}\r\n}","import { useHttp } from \"../hooks/http.hook\";\r\nconst useMarvelService = () => {\r\n\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = \"apikey=b05c834936cf7a1f465993be62ef8eee\";\r\n\r\n    const getAllCharacters = async (offset = 300) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`)\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        if (!res) {\r\n            throw new Error();\r\n        }\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (res) => {\r\n        return {\r\n            name: res.name,\r\n            description: res.description ? res.description.slice(0, 210) + \"...\" : \"There is no description for this character\",\r\n            thumbnail: res.thumbnail.path + \".\" + res.thumbnail.extension,\r\n            homepage: res.urls[0].url,\r\n            wiki: res.urls[1].url,\r\n            id: res.id,\r\n            comics: res.comics.items.length === 0 ? \"There is no comics with this character\" : res.comics.items.slice(0,10),\r\n        }\r\n    }\r\n\r\n    const getComics = async (offset = 20) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`)\r\n        return res.data.results.map(_transformComics)\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformComics = (res) => {\r\n        return {\r\n            title: res.title,\r\n            id: res.id,\r\n            thumbnail: res.thumbnail.path + \".\" + res.thumbnail.extension,\r\n            price: res.prices[0].price ? res.prices[0].price + \"$\" : \"Not available\",\r\n            description: res.description || \"There is no description for this comic\",\r\n            pages: res.pageCount ? res.pageCount + \" pages\" : \"No information about number of pages\",\r\n            language: \"Language: \" + res.textObjects[0]?.language || \"en-us\",\r\n        }\r\n    }\r\n\r\n    const getFormCharacter = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.length !== 0 ? _transformCharacter(res.data.results[0]) : []\r\n    }\r\n    \r\n    return {getAllCharacters, getCharacter, clearError, getComics, getComic, getFormCharacter, process, setProcess}\r\n}\r\n\r\nexport default useMarvelService;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","\r\nimport Skeleton from \"../components/skeleton/Skeleton\";\r\nimport spinner from './Rolling-1s-200px.gif';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch(process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <img \r\n                    className=\"spinner\" \r\n                    src={spinner}\r\n                    alt=\"spin\"></img>\r\n        case 'confirmed':\r\n            return <Component data={data}/>\r\n        case 'error':\r\n            return <h1 className=\"spinner\">No character found<br/>Try again</h1>\r\n        default:\r\n            throw new Error('Unexpected process')\r\n    }\r\n}\r\n\r\nexport default setContent"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","_ref","Component","dataType","id","useParams","data","setData","useState","clearError","getCharacter","getComic","process","setProcess","useMarvelService","useEffect","updateData","then","onDataLoaded","style","_Fragment","setContent","request","useHttp","useCallback","async","url","method","arguments","length","undefined","body","headers","responce","fetch","ok","Error","concat","status","json","e","_apiBase","_apiKey","_transformCharacter","res","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_res$textObjects$","title","price","prices","pages","pageCount","language","textObjects","getAllCharacters","offset","results","map","getComics","getFormCharacter","Skeleton","spinner"],"sourceRoot":""}