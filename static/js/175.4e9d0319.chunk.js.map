{"version":3,"file":"static/js/175.4e9d0319.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\r\nimport avengers from '../../resources/img/Avengers.png';\r\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\r\n\r\nconst AppBanner = () => {\r\n    return (\r\n        <div className=\"app__banner\">\r\n            <img src={avengers} alt=\"Avengers\"/>\r\n            <div className=\"app__banner-text\">\r\n                New comics every week!<br/>\r\n                Stay tuned!\r\n            </div>\r\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppBanner;","import './comicsList.scss';\r\nimport {Link} from \"react-router-dom\"\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport { useState, useEffect} from 'react';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\nconst setContent = (process, Component, newItemsLoading) => {\r\n    switch(process) {\r\n        case 'waiting':\r\n            return <img \r\n                    className=\"spinner\" \r\n                    src='Rolling-1s-200px.gif' \r\n                    alt=\"spin\"></img>;\r\n        case 'loading':\r\n            return newItemsLoading ? <Component/> : <img \r\n                                                    className=\"spinner\" \r\n                                                    src='Rolling-1s-200px.gif' \r\n                                                    alt=\"spin\"></img>;\r\n        case 'confirmed':\r\n            return <Component/>\r\n        case 'error':\r\n            return <h1 className=\"spinner\">There is no such character</h1>\r\n        default:\r\n            throw new Error('Unexpected process')\r\n    }\r\n}\r\n\r\nconst ComicsList = () => {\r\n\r\n    const {getComics, process, setProcess} = useMarvelService();\r\n\r\n    const [chars, setChars] = useState([]);\r\n    const [offset, setOffset] = useState(0);\r\n    const [newItemsLoading, setNewItems] = useState(false);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n\r\n    \r\n    const onCharsLoaded = (charsServer) => {\r\n        let ended = false;\r\n        if (charsServer.length < 8) {\r\n            ended = true\r\n        }\r\n        setChars([...chars, ...charsServer]);\r\n        setNewItems(false);\r\n        setOffset(offset + 8);\r\n        setCharEnded(ended);\r\n    }\r\n\r\n    function renderComics(chars) {\r\n        const elems = chars.map(((data, i) => {\r\n            const {title, thumbnail, id, price} = data\r\n            return (\r\n                <CSSTransition timeout={500} classNames={\"comics__item\"} key={i}>\r\n                    <li key={i} className=\"comics__item\">\r\n                        <Link to={`/comics/${id}`}>\r\n                            <img src={thumbnail} alt=\"ultimate war\" className=\"comics__item-img\"/>\r\n                            <div className=\"comics__item-name\">{title}</div>\r\n                            <div className=\"comics__item-price\">{price}</div>\r\n                        </Link>\r\n                    </li>\r\n                </CSSTransition>\r\n            )\r\n        }))\r\n        return (\r\n            <TransitionGroup component={null}>\r\n                {elems}\r\n            </TransitionGroup>\r\n        )\r\n    }\r\n\r\n    useEffect(() => {\r\n        onRequest();\r\n        // eslint-disable-next-line\r\n    }, []);\r\n \r\n    const onRequest = () => {\r\n        getComics(offset)\r\n            .then(onCharsLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n    const style = process === 'loading' && !newItemsLoading ? 'comics__grid-load' : 'comics__grid'\r\n    return (\r\n        <div className=\"comics__list\">\r\n            <ul className={style}>\r\n                {setContent(process, () => renderComics(chars), newItemsLoading)}\r\n            </ul>\r\n            <button disabled={newItemsLoading} style={{'display' : charEnded ? 'none' : 'block'}} \r\n                    onClick = {() => {onRequest(); setNewItems(true)}} className=\"button button__main button__long\">\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComicsList;","import ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                name=\"description\"\r\n                content=\"Page with list of our comics\"\r\n                />\r\n                <title>Marvel Comics Page</title>\r\n            </Helmet>\r\n            <AppBanner/>\r\n            <ComicsList/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","import {useState, useCallback} from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting')\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type' : 'application/json'}) => {\r\n        setProcess('loading');\r\n        try {\r\n            const responce = await fetch(url, {method, body, headers});\r\n            if (!responce.ok) {\r\n                throw new Error(`Error, status: ${responce.status}`);\r\n            }\r\n            const data = await responce.json();\r\n            return data\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess}\r\n}","import { useHttp } from \"../hooks/http.hook\";\r\nconst useMarvelService = () => {\r\n\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = \"apikey=b05c834936cf7a1f465993be62ef8eee\";\r\n\r\n    const getAllCharacters = async (offset = 300) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`)\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        if (!res) {\r\n            throw new Error();\r\n        }\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (res) => {\r\n        return {\r\n            name: res.name,\r\n            description: res.description ? res.description.slice(0, 210) + \"...\" : \"There is no description for this character\",\r\n            thumbnail: res.thumbnail.path + \".\" + res.thumbnail.extension,\r\n            homepage: res.urls[0].url,\r\n            wiki: res.urls[1].url,\r\n            id: res.id,\r\n            comics: res.comics.items.length === 0 ? \"There is no comics with this character\" : res.comics.items.slice(0,10),\r\n        }\r\n    }\r\n\r\n    const getComics = async (offset = 20) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`)\r\n        return res.data.results.map(_transformComics)\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformComics = (res) => {\r\n        return {\r\n            title: res.title,\r\n            id: res.id,\r\n            thumbnail: res.thumbnail.path + \".\" + res.thumbnail.extension,\r\n            price: res.prices[0].price ? res.prices[0].price + \"$\" : \"Not available\",\r\n            description: res.description || \"There is no description for this comic\",\r\n            pages: res.pageCount ? res.pageCount + \" pages\" : \"No information about number of pages\",\r\n            language: \"Language: \" + res.textObjects[0]?.language || \"en-us\",\r\n        }\r\n    }\r\n\r\n    const getFormCharacter = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.length !== 0 ? _transformCharacter(res.data.results[0]) : []\r\n    }\r\n    \r\n    return {getAllCharacters, getCharacter, clearError, getComics, getComic, getFormCharacter, process, setProcess}\r\n}\r\n\r\nexport default useMarvelService;"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","setContent","process","Component","newItemsLoading","Error","ComicsList","getComics","setProcess","useMarvelService","chars","setChars","useState","offset","setOffset","setNewItems","charEnded","setCharEnded","onCharsLoaded","charsServer","ended","length","useEffect","onRequest","then","style","elems","map","data","i","title","thumbnail","id","price","CSSTransition","timeout","classNames","Link","to","concat","TransitionGroup","component","renderComics","disabled","onClick","ComicsPage","_Fragment","Helmet","name","content","request","clearError","useHttp","useCallback","async","url","method","arguments","undefined","body","headers","responce","fetch","ok","status","json","e","_apiBase","_apiKey","_transformCharacter","res","description","slice","path","extension","homepage","urls","wiki","comics","items","_transformComics","_res$textObjects$","prices","pages","pageCount","language","textObjects","getAllCharacters","results","getCharacter","getComic","getFormCharacter"],"sourceRoot":""}