{"version":3,"file":"static/js/136.5ca71a96.chunk.js","mappings":"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","sources":["components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/formChar/FormChar.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import {useState, useEffect} from 'react';\r\nimport './randomChar.scss';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\nimport setContent from '../../utils/setContent';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst RandomChar = () => {\r\n\r\n    const [char, setChar] = useState(null);\r\n\r\n\r\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        // eslint-disable-next-line\r\n    }, [])\r\n    \r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + (1011000));\r\n        getCharacter(id)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n            .catch(() => setProcess('error'));\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar\">\r\n            {setContent(process, View, char)}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button onClick={updateChar} disabled={process === 'loading'} className=\"button button__main\">\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({data}) => {\r\n    const {id, description, name, thumbnail, wiki} = data;\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} \r\n                 alt=\"Random character\" \r\n                 className=\"randomchar__img\" \r\n                 style={{objectFit: thumbnail.endsWith('image_not_available.jpg') ? 'contain' : 'cover'}}/>\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {description}\r\n                </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <Link to={`/characters/${id}`} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </Link>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default RandomChar;","import './charList.scss';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport {useState, useRef, useEffect, useMemo} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\n\r\nconst setContent = (process, Component, newItemsLoading) => {\r\n    switch(process) {\r\n        case 'waiting':\r\n            return <img \r\n                    className=\"spinner\" \r\n                    src='Rolling-1s-200px.gif' \r\n                    alt=\"spin\"></img>;\r\n        case 'loading':\r\n            return newItemsLoading ? <Component/> : <img \r\n                                                    className=\"spinner\" \r\n                                                    src='Rolling-1s-200px.gif' \r\n                                                    alt=\"spin\"></img>;\r\n        case 'confirmed':\r\n            return <Component/>\r\n        case 'error':\r\n            return <h1 className=\"spinner\">There is no such character</h1>\r\n        default:\r\n            throw new Error('Unexpected process')\r\n    }\r\n}\r\n    \r\n\r\nconst CharList = (props) => {\r\n    \r\n    const {getAllCharacters, process, setProcess} = useMarvelService();\r\n\r\n    const [chars, setChars] = useState([]);\r\n    const [offset, setOffset] = useState(300);\r\n    const [newItemsLoading, setNewItems] = useState(false);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n\r\n    const onCharsLoaded = (charsServer) => {\r\n        let ended = false;\r\n        if (charsServer.length < 9 || offset >= 1555) {\r\n            ended = true\r\n        }\r\n        setChars([...chars, ...charsServer]);\r\n        setNewItems(false);\r\n        setOffset(offset + 9);\r\n        setCharEnded(ended);\r\n\r\n    }\r\n\r\n    const itemRefs = useRef([]);\r\n\r\n    const focusOnRef = (id) => {\r\n        itemRefs.current.forEach(item => item.classList.remove(\"char__item_selected\"));\r\n        itemRefs.current[id].classList.add(\"char__item_selected\");\r\n        itemRefs.current[id].focus();\r\n    }\r\n\r\n    function renderItems(chars) {\r\n        const elems = chars.map(((data, i) => {\r\n            const {name, thumbnail, id} = data\r\n            return (\r\n                <CSSTransition timeout={500} classNames={\"char__item\"} key={id}>\r\n                    <li onClick={() => {props.onCharSelect(id); focusOnRef(i)}}\r\n                        tabIndex={0}\r\n                        ref={el => itemRefs.current[i] = el} \r\n                        className=\"char__item\" \r\n                        key={i} \r\n                        onKeyDown={(e) => {\r\n                            if (e.key === ' ' || e.key === \"Enter\") {\r\n                                props.onCharSelect(id); \r\n                                focusOnRef(i);\r\n                            }\r\n                        }}>\r\n                        <img \r\n                            src={thumbnail} \r\n                            alt=\"abyss\" \r\n                            style={{objectFit: thumbnail.endsWith('image_not_available.jpg') ? 'contain' : 'cover'}}/>\r\n                        <div className=\"char__name\">{name}</div>\r\n                    </li>\r\n                </CSSTransition>\r\n            )\r\n        }))\r\n        return (\r\n            <TransitionGroup component={null}>\r\n                {elems}\r\n            </TransitionGroup>\r\n        )\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n       onRequest();\r\n       // eslint-disable-next-line\r\n    }, []);\r\n\r\n    const onRequest = () => {\r\n        getAllCharacters(offset)\r\n            .then(onCharsLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const content = useMemo(() => {\r\n        return setContent(process, () => renderItems(chars), newItemsLoading);\r\n        // eslint-disable-next-line\r\n    }, [process])\r\n    const style = process === 'loading' && !newItemsLoading ? 'char__grid-load' : 'char__grid'\r\n    return (\r\n        <div className=\"char__list\">\r\n            <ul className={style}>\r\n            {content}   \r\n            </ul>\r\n            <button disabled={newItemsLoading} style={{'display' : charEnded ? 'none' : 'block'}} \r\n                    onClick = {() => {onRequest(); setNewItems(true)}} className=\"button button__main button__long\">\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelect: PropTypes.func\r\n}\r\n\r\nexport default CharList;","import {useState, useEffect} from 'react';\r\nimport './charInfo.scss';\r\nimport PropTypes from 'prop-types';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst CharInfo = (props) => {\r\n    \r\n    const [char, setChar] = useState(null);\r\n\r\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        // eslint-disable-next-line\r\n    }, [props.charId]) \r\n\r\n    const updateChar = () => {\r\n        const {charId} = props;\r\n        if (!charId) {\r\n            return;\r\n        }\r\n        \r\n        clearError();\r\n\r\n        getCharacter(charId)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n    const style = process === 'loading' ? 'char__info-load' : 'char__info'\r\n    return (\r\n        <div className={style}>\r\n            {setContent(process, View, char)}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({data}) => {\r\n    const {name, thumbnail, wiki, description, comics, id} = data;\r\n    return (\r\n        <div key={id}>\r\n            <div className=\"char__basics\">\r\n                <img \r\n                style = {{objectFit: thumbnail.endsWith('image_not_available.jpg') ? 'contain' : 'cover'}} \r\n                src={thumbnail} \r\n                alt=\"abyss\"/>\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <Link to={`/characters/${id}`} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </Link>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n            {\r\n                typeof comics === \"string\" ? \r\n                comics : \r\n                comics.map((item, i) => {\r\n                    const id = item.resourceURI.split('/').pop();\r\n                    return (\r\n                        <li key = {i}><Link to={`/comics/${id}`} className=\"char__comics-item\">\r\n                            {item.name}\r\n                        </Link></li>\r\n                    )\r\n                })\r\n            }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import './FormChar.scss';\r\nimport { Formik, Field, Form, ErrorMessage} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst FormChar = () => {\r\n\r\n    const [char, setChar] = useState(null);\r\n    const {getFormCharacter, clearError, process, setProcess} = useMarvelService()\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n        getFormCharacter(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    return (\r\n        <div className='char__search-form'>\r\n            <Formik\r\n            initialValues={{\r\n                name: ''\r\n            }}\r\n            validationSchema = {Yup.object({\r\n                name: Yup.string()\r\n                        .required('Required field'),\r\n            })}\r\n            onSubmit = {(values) => updateChar(values.name)}\r\n            >\r\n                <Form>\r\n                    <label className='char__search-label' htmlFor='name'>Or find a character by name:</label>\r\n                    <div className='char__search-wrapper'>\r\n                        <Field placeholder=\"Enter name\" name=\"name\" id=\"name\" type='text'/>\r\n                        <button disabled={process === 'loading'} className=\"button button__main\" type=\"submit\">\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    {!char ? null : char.length !== 0 ? <Found name={char.name} id={char.id}/> : <div className='char__search-error'>The character was not found</div>}\r\n                    <ErrorMessage component=\"div\" name=\"name\" className='char__search-error'/>\r\n                </Form>\r\n            </Formik>\r\n            {process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Found = ({name, id}) => {\r\n    return (\r\n        <div className='char__search-wrapper'>\r\n            <div className='char__search-success'>There is! Visit {name} page?</div>\r\n            <Link to={`/characters/${id}`}>\r\n                <button className=\"button button__secondary\" type=\"submit\">\r\n                    <div className=\"inner\">to page</div>\r\n                </button>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\nexport default FormChar;\r\n\r\n\r\n","import RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport decoration from '../../resources/img/vision.png';\r\nimport FormChar from \"../formChar/FormChar\";\r\nimport { useState } from \"react\";\r\nimport {Helmet} from \"react-helmet\";\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null)\r\n\r\n    const onCharSelect = (id) => {\r\n        setChar(id)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                name=\"description\"\r\n                content=\"Web site created using create-react-app\"\r\n                />\r\n                <title>Marvel Heroes</title>\r\n            </Helmet>\r\n            <RandomChar/>\r\n            <div className=\"char__content\">\r\n                <CharList onCharSelect={onCharSelect}/>\r\n                <div>\r\n                    <CharInfo charId = {selectedChar}/>\r\n                    <FormChar/>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage","import {useState, useCallback} from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting')\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type' : 'application/json'}) => {\r\n        setProcess('loading');\r\n        try {\r\n            const responce = await fetch(url, {method, body, headers});\r\n            if (!responce.ok) {\r\n                throw new Error(`Error, status: ${responce.status}`);\r\n            }\r\n            const data = await responce.json();\r\n            return data\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess}\r\n}","import { useHttp } from \"../hooks/http.hook\";\r\nconst useMarvelService = () => {\r\n\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = \"apikey=b05c834936cf7a1f465993be62ef8eee\";\r\n\r\n    const getAllCharacters = async (offset = 300) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`)\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        if (!res) {\r\n            throw new Error();\r\n        }\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (res) => {\r\n        return {\r\n            name: res.name,\r\n            description: res.description ? res.description.slice(0, 210) + \"...\" : \"There is no description for this character\",\r\n            thumbnail: res.thumbnail.path + \".\" + res.thumbnail.extension,\r\n            homepage: res.urls[0].url,\r\n            wiki: res.urls[1].url,\r\n            id: res.id,\r\n            comics: res.comics.items.length === 0 ? \"There is no comics with this character\" : res.comics.items.slice(0,10),\r\n        }\r\n    }\r\n\r\n    const getComics = async (offset = 20) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`)\r\n        return res.data.results.map(_transformComics)\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformComics = (res) => {\r\n        return {\r\n            title: res.title,\r\n            id: res.id,\r\n            thumbnail: res.thumbnail.path + \".\" + res.thumbnail.extension,\r\n            price: res.prices[0].price ? res.prices[0].price + \"$\" : \"Not available\",\r\n            description: res.description || \"There is no description for this comic\",\r\n            pages: res.pageCount ? res.pageCount + \" pages\" : \"No information about number of pages\",\r\n            language: \"Language: \" + res.textObjects[0]?.language || \"en-us\",\r\n        }\r\n    }\r\n\r\n    const getFormCharacter = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.length !== 0 ? _transformCharacter(res.data.results[0]) : []\r\n    }\r\n    \r\n    return {getAllCharacters, getCharacter, clearError, getComics, getComic, getFormCharacter, process, setProcess}\r\n}\r\n\r\nexport default useMarvelService;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","\r\nimport Skeleton from \"../components/skeleton/Skeleton\";\r\nimport spinner from './Rolling-1s-200px.gif';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch(process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <img \r\n                    className=\"spinner\" \r\n                    src={spinner}\r\n                    alt=\"spin\"></img>\r\n        case 'confirmed':\r\n            return <Component data={data}/>\r\n        case 'error':\r\n            return <h1 className=\"spinner\">No character found<br/>Try again</h1>\r\n        default:\r\n            throw new Error('Unexpected process')\r\n    }\r\n}\r\n\r\nexport default setContent"],"names":["View","_ref","data","id","description","name","thumbnail","wiki","_jsxs","className","children","_jsx","src","alt","style","objectFit","endsWith","Link","to","concat","href","RandomChar","char","setChar","useState","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateChar","onCharLoaded","Math","floor","random","then","catch","setContent","onClick","disabled","mjolnir","props","getAllCharacters","chars","setChars","offset","setOffset","newItemsLoading","setNewItems","charEnded","setCharEnded","onCharsLoaded","charsServer","ended","length","itemRefs","useRef","focusOnRef","current","forEach","item","classList","remove","add","focus","onRequest","content","useMemo","Component","Error","elems","map","i","CSSTransition","timeout","classNames","onCharSelect","tabIndex","ref","el","onKeyDown","e","key","TransitionGroup","component","renderItems","comics","resourceURI","split","pop","charId","Found","type","FormChar","getFormCharacter","Formik","initialValues","validationSchema","Yup","required","onSubmit","values","Form","htmlFor","Field","placeholder","ErrorMessage","MainPage","selectedChar","_Fragment","Helmet","CharList","CharInfo","decoration","request","useHttp","useCallback","async","url","method","arguments","undefined","body","headers","responce","fetch","ok","status","json","_apiBase","_apiKey","_transformCharacter","res","slice","path","extension","homepage","urls","items","_transformComics","_res$textObjects$","title","price","prices","pages","pageCount","language","textObjects","results","getComics","getComic","Skeleton","spinner"],"sourceRoot":""}